# Generated by sila2.code_generator; sila2.__version__: 0.10.2
from __future__ import annotations

from abc import ABC, abstractmethod
from typing import TYPE_CHECKING

from sila2.server import FeatureImplementationBase, MetadataDict

from .labwarequeryservice_types import SPARQLQuery_Responses

if TYPE_CHECKING:
    from ...server import Server


class LabwareQueryServiceBase(FeatureImplementationBase, ABC):
    parent_server: Server

    def __init__(self, parent_server: Server):
        """
        SPARQL querying the Labware Ontology.
        """
        super().__init__(parent_server=parent_server)

    @abstractmethod
    def SPARQLQuery(self, Query: str, *, metadata: MetadataDict) -> SPARQLQuery_Responses:
        """
        SPARQL query the Labware Ontology.


        :param Query: SPARQL query.

        :param metadata: The SiLA Client Metadata attached to the call

        :return:

            - Result: SPARQL query result.


        """
        pass
